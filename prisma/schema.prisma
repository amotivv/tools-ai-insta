generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  tier          UserTier  @default(BASIC)
  isActive      Boolean   @default(true)
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  generatedImages GeneratedImage[]
  sharedFeeds   SharedFeed[]
  preferences   UserPreferences?

  @@index([isActive])
}

model UserPreferences {
  id                  String   @id @default(cuid())
  userId              String   @unique
  modelType           String   @default("flux-schnell")
  safetyCheckerEnabled Boolean  @default(true)
  inferenceSteps      Int      @default(2)
  guidanceScale       Decimal  @default(5.5) @db.Decimal(3,1)
  aspectRatio         String   @default("1:1")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GeneratedImage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    String
  imageUrl  String
  blobKey   String   @unique
  cacheKey  String   @unique
  createdAt DateTime @default(now())
  likes     Int      @default(0)
  isPublic  Boolean  @default(false)

  @@index([userId])
}

model SharedFeed {
  id          String   @id
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  images      String[] // Array of GeneratedImage IDs
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  metadata    Json
  isActive    Boolean  @default(true)

  @@index([userId])
}

enum UserTier {
  BASIC
  PREMIUM
}
